# Load required libraries
library(readxl)
library(dplyr)
library(stringr)

# Enhanced function to standardize miRNA names
standardize_mirna_name <- function(name, type) {
  if (is.na(name)) return(NA)
  
  # Keep the full name structure but standardize the parts we want to match
  # 1. Convert miR to mir
  name <- str_replace(name, "miR", "mir")
  
  # 2. Extract the core number and any letters directly after it
  base_number <- str_extract(name, "\\d+[a-z]?")
  
  # 3. Get the prefix (everything before the number)
  prefix <- str_extract(name, ".*?(?=\\d+[a-z]?)")
  
  # 4. Combine prefix and base number
  if (!is.na(base_number) && !is.na(prefix)) {
    return(paste0(prefix, base_number))
  }
  
  return(name)
}

# Read the Excel files
monocytes_df <- read_excel("Monocytes_miRs.xlsx")
nldl_df <- read_excel("nLDL-NMV_miRs.xlsx")
oxldl_df <- read_excel("oxLDL-NMV_miRs.xlsx")

# Create standardized name columns
monocytes_df$std_name <- sapply(monocytes_df[[1]], standardize_mirna_name, type="monocyte")
nldl_df$std_name <- sapply(nldl_df[[1]], standardize_mirna_name, type="nldl_oxldl")
oxldl_df$std_name <- sapply(oxldl_df[[1]], standardize_mirna_name, type="nldl_oxldl")

# For monocytes, group by standardized name and take the maximum expression
monocytes_grouped <- monocytes_df %>%
  group_by(std_name) %>%
  summarise(
    Monocyte_Expression = max(Mean),
    Original_Monocyte_miRNAs = paste(!!sym(names(.)[1]), collapse = "; ")
  )

# Filter nLDL-NMV miRNAs with fold change criteria
nldl_filtered <- nldl_df %>%
  filter(Mean >= 100) %>%  # Changed to Expression ≥ 100 in NMVs
  left_join(monocytes_grouped, by = "std_name") %>%
  mutate(
    Monocyte_Expression = ifelse(is.na(Monocyte_Expression), 0, Monocyte_Expression),
    Fold_Change = Mean / (Monocyte_Expression + 0.001)  # Adding small value to avoid division by zero
  ) %>%
  filter(Fold_Change >= 2) %>%  # At least 2-fold higher in NMVs
  transmute(
    Standardized_miRNA = std_name,
    Original_NMV_miRNA = .[[1]],
    Original_Monocyte_miRNAs = Original_Monocyte_miRNAs,
    nLDL_NMV_Expression = Mean,
    Monocyte_Expression = Monocyte_Expression,
    Fold_Change = Fold_Change
  ) %>%
  arrange(desc(Fold_Change))  # Sort by fold change

# Filter oxLDL-NMV miRNAs with fold change criteria
oxldl_filtered <- oxldl_df %>%
  filter(Mean >= 100) %>%  # Changed to Expression ≥ 100 in NMVs
  left_join(monocytes_grouped, by = "std_name") %>%
  mutate(
    Monocyte_Expression = ifelse(is.na(Monocyte_Expression), 0, Monocyte_Expression),
    Fold_Change = Mean / (Monocyte_Expression + 0.001)  # Adding small value to avoid division by zero
  ) %>%
  filter(Fold_Change >= 2) %>%  # At least 2-fold higher in NMVs
  transmute(
    Standardized_miRNA = std_name,
    Original_NMV_miRNA = .[[1]],
    Original_Monocyte_miRNAs = Original_Monocyte_miRNAs,
    oxLDL_NMV_Expression = Mean,
    Monocyte_Expression = Monocyte_Expression,
    Fold_Change = Fold_Change
  ) %>%
  arrange(desc(Fold_Change))  # Sort by fold change

# Write results to Excel files
library(writexl)
write_xlsx(nldl_filtered, "nLDL_NMV_filtered_miRNAs_fold.xlsx")
write_xlsx(oxldl_filtered, "oxLDL_NMV_filtered_miRNAs_fold.xlsx")

# Print summary
cat("Number of filtered miRNAs in nLDL-NMV:", nrow(nldl_filtered), "\n")
cat("Number of filtered miRNAs in oxLDL-NMV:", nrow(oxldl_filtered), "\n")

# Print first few rows of each filtered dataset
cat("\nFirst few rows of nLDL filtered data (highest fold change):\n")
print(head(nldl_filtered))

cat("\nFirst few rows of oxLDL filtered data (highest fold change):\n")
print(head(oxldl_filtered))

